/*
31. 下一个排列
整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

必须 原地 修改，只允许使用额外常数空间。

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
*/

/* _____________ Your Code Here _____________ */

/**
 Do not return anything, modify nums in-place instead.
 */
export function nextPermutation (nums: number[]): void {
  // 增加的幅度尽可能的小
  // 尽可能靠右的低位进行交换，需要从后向前查找
  for (let i = nums.length - 2; i >= 0; i--) {
    // 关键点1：
    // 为什么 j 也从后向前查找？
    // 因为 i 后面必然是降序，因为 i 就是第一个遇到的不符合降序的，需要交换
    for (let j = nums.length - 1; j > i; j--) {
      // 如果后面的比前面的大，交换，使下一个数字更大
      if (nums[j] > nums[i]) {
        ;[nums[i], nums[j]] = [nums[j], nums[i]]
        // 将「大数」换到前面后，需要将「大数」后面的所有数重置为升序，升序排列就是最小的排列
        const theLatterPart = nums.slice(i + 1)
        // 关键点2：
        // theLatterPart.sort((a, b) => a - b) // 没必要
        // 交换后，i 后面依然是降序，反转即为升序
        // 为什么交换后依然是降序？
        // 比如5764，4比5小，所以没有跟5换，而是6跟5换了，所以5交换过来以后，仍然比4大
        theLatterPart.reverse()
        nums.splice(i + 1, theLatterPart.length, ...theLatterPart)
        return
      }
    }
  }

  // 如果没有更大的整数，则输出最小的整数
  nums.sort((a, b) => a - b)
}
